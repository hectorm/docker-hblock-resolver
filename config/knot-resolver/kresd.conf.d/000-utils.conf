local notify = require('cqueues.notify')

function exists_file(path)
	local file, err = io.open(path, 'r')
	if err ~= nil then
		return false
	end
	file:close()
	return true
end

function read_file(path)
	local file, err = io.open(path, 'r')
	if err ~= nil then
		io.stderr:write(err .. '\n')
		return nil
	end
	local content = file:read('*all')
	file:close()
	return content
end

function write_file(path, content)
	local file, err = io.open(path, 'w')
	if err ~= nil then
		io.stderr:write(err .. '\n')
		return false
	end
	file:write(content)
	file:close()
	return true
end

function watch_file(path, cb)
	local dirname = path:match('^(.+)/.+$')
	local basename = path:match('^.+/(.+)$')

	local watcher = notify.opendir(dirname)
	watcher:add(basename)

	worker.coroutine(function ()
		for flags, name in watcher:changes() do
			if name == basename then
				cb(flags, name)
			end
		end
	end)
end

function start_prog(path)
	local pipe, err = io.popen('command ' .. path .. ' 2>&1; printf %s $?', 'r')
	if err ~= nil then
		io.stderr:write(err .. '\n')
		return '', 1
	end
	local out, exit = '', 1
	local next = pipe:lines()
	local curr_val = next()
	while curr_val ~= nil do
		local next_val = next()
		if next_val ~= nil then
			line = curr_val .. '\n'
			out = out .. line
			io.stdout:write(line)
		else
			exit = tonumber(curr_val)
		end
		curr_val = next_val
	end
	pipe:close()
	return out, exit
end
