-- Expose blocklist zone API and web UI

if not http then modules.load('http') end

http.configs._builtin.webmgmt.endpoints['/hblock'] = {
	'text/plain',
	function (h, stream)
		local method = h:get(':method')
		local option = h:get(':path'):match('^/[^/]*/([^/]*)')
		if option == 'config' then
			local prop = h:get(':path'):match('^/[^/]*/config/([^/]*)')
			-- GET method
			if method == 'GET' then
				local content = nil
				if prop == 'sources' then
					content = read_file(env.KRESD_DATA_DIR .. '/hblock/sources.list')
				elseif prop == 'allowlist' then
					content = read_file(env.KRESD_DATA_DIR .. '/hblock/allow.list')
				elseif prop == 'denylist' then
					content = read_file(env.KRESD_DATA_DIR .. '/hblock/deny.list')
				end
				if content ~= nil then return 200, content else return 500, '' end
			-- POST method
			elseif method == 'POST' then
				local success = false
				local content = stream:get_body_as_string()
				if prop == 'sources' then
					success = write_file(env.KRESD_DATA_DIR .. '/hblock/sources.list', content)
				elseif prop == 'allowlist' then
					success = write_file(env.KRESD_DATA_DIR .. '/hblock/allow.list', content)
				elseif prop == 'denylist' then
					success = write_file(env.KRESD_DATA_DIR .. '/hblock/deny.list', content)
				end
				if success then return 200 else return 500 end
			end
		elseif option == 'update' then
			-- POST method
			if method == 'POST' then
				local out, exit = start_prog('kres-blocklist-updater')
				if exit == 0 then return 200, out else return 500, out end
			end
		end
	end
}

http.snippets['/hblock'] = {
	'hBlock config',
	[[
		<div class="row" style="margin-bottom: 20px;">
			<label class="col-xs-12">
				<h4>Sources:</h4>
				<textarea name="sources" class="hblock-field form-control" rows="10" style="resize: vertical;" autocomplete="off" disabled></textarea>
			</label>
			<label class="col-xs-12">
				<h4>Allowlist:</h4>
				<textarea name="allowlist" class="hblock-field form-control" rows="10" style="resize: vertical;" autocomplete="off" disabled></textarea>
			</label>
			<label class="col-xs-12">
				<h4>Denylist:</h4>
				<textarea name="denylist" class="hblock-field form-control" rows="10" style="resize: vertical;" autocomplete="off" disabled></textarea>
			</label>
			<div class="col-xs-12">
				<button id="hblock-save" class="btn btn-primary">Save config</button>
				<button id="hblock-update" class="btn btn-primary">Update blocklist</button>
			</div>
		</div>
		<script>
			'use strict';
			(function () {
				const $save = document.querySelector('#hblock-save');
				const $update = document.querySelector('#hblock-update');
				const $fields = Array.from(document.querySelectorAll('.hblock-field[name]'));

				const request = ({ method = 'GET', url = '', headers = {}, body } = {}) => {
					return new Promise((resolve, reject) => {
						const xhr = new XMLHttpRequest();
						xhr.open(method, url, true);
						for (const [key, value] of Object.entries(headers)) {
							xhr.setRequestHeader(key, value);
						}
						xhr.onload = () => {
							if (xhr.status >= 200 && xhr.status < 400) resolve(xhr.responseText);
							else reject(`${xhr.status} ${xhr.statusText}`);
						};
						xhr.onerror = () => { reject(`${xhr.status} ${xhr.statusText}`); }
						xhr.onabort = () => { reject(`${xhr.status} ${xhr.statusText}`); }
						xhr.send(body);
					});
				};

				$save.addEventListener('click', () => {
					$save.disabled = true;
					Promise.all(
						$fields
							.filter(($f) => $f.classList.contains('dirty'))
							.map(($f) =>
								request({
									method: 'POST',
									url: `hblock/config/${$f.name}`,
									headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' },
									body: $f.value
								})
									.then(() => { $f.classList.remove('dirty'); })
									.catch((error) => { alert(`Update ${$f.name}: ${error}`); })
							)
					)
						.catch((error) => { alert(`Save: ${error}`); })
						.finally(() => { $save.disabled = false; });
				});

				$update.addEventListener('click', () => {
					$update.disabled = true;
					request({
						method: 'POST',
						url: 'hblock/update'
					})
						.catch((error) => { alert(`Update: ${error}`); })
						.finally(() => { $update.disabled = false; });
				});

				$fields.forEach(($f) => {
					request({
						method: 'GET',
						url: `hblock/config/${$f.name}`
					})
						.then((result) => { $f.value = result; $f.disabled = false; })
						.catch((error) => { $f.value = error; });

					$f.addEventListener('change', () => { $f.classList.add('dirty'); });
				});
			})();
		</script>
	]]
}
