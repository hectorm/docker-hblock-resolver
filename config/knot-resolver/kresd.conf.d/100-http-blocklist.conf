-- Expose blocklist zone API and web UI

if not http then modules.load('http') end

http.configs._builtin.webmgmt.endpoints['/hblock'] = {
	'text/plain',
	function (h, stream)
		local method = h:get(':method')
		local option = h:get(':path'):match('^/[^/]*/([^/]*)')
		if option == 'config' then
			local name = h:get(':path'):match('^/[^/]*/config/([^/]*)')

			local path = nil
			if name == 'sources' then path = env.KRESD_DATA_DIR .. '/hblock/sources.list'
			elseif name == 'allowlist' then path = env.KRESD_DATA_DIR .. '/hblock/allow.list'
			elseif name == 'denylist' then path = env.KRESD_DATA_DIR .. '/hblock/deny.list'
			else return 400, '' end

			-- GET method
			if method == 'GET' then
				if exists_file(path) then
					local content = read_file(path)
					if content ~= nil then
						return 200, content
					else
						return 500, ''
					end
				end
				return 404, ''
			-- POST method
			elseif method == 'POST' then
				local content = stream:get_body_as_string()
				if write_file(path, content) then
					return 200, ''
				else
					return 500, ''
				end
			-- DELETE method
			elseif method == 'DELETE' then
				if not exists_file(path) or delete_file(path) then
					return 200, ''
				else
					return 500, ''
				end
			end
		elseif option == 'update' then
			-- POST method
			if method == 'POST' then
				local out, exit = start_prog('hblock')
				if exit == 0 then
					return 200, out
				else
					return 500, out
				end
			end
		end
	end
}

http.snippets['/hblock'] = {
	'hBlock config',
	[[
		<div id="hblock-config" class="row">
			<div class="col-xs-12">
				<label class="hblock-file-label">
					<input type="checkbox" class="hblock-file-toggle" data-file="sources" autocomplete="off" />
					<span>Use custom sources</span>
				</label>
				<textarea class="hblock-file-content form-control hidden" data-file="sources" rows="10" autocomplete="off"></textarea>
			</div>
			<div class="col-xs-12">
				<label class="hblock-file-label">
					<input type="checkbox" class="hblock-file-toggle" data-file="allowlist" autocomplete="off" />
					<span>Use custom allowlist</span>
				</label>
				<textarea class="hblock-file-content form-control hidden" data-file="allowlist" rows="10" autocomplete="off"></textarea>
			</div>
			<div class="col-xs-12">
				<label class="hblock-file-label">
					<input type="checkbox" class="hblock-file-toggle" data-file="denylist" autocomplete="off" />
					<span>Use custom denylist</span>
				</label>
				<textarea class="hblock-file-content form-control hidden" data-file="denylist" rows="10" autocomplete="off"></textarea>
			</div>
			<div class="col-xs-12">
				<button id="hblock-save" class="btn btn-primary">Save config</button>
				<button id="hblock-update" class="btn btn-primary">Update blocklist</button>
			</div>
		</div>
		<style>
			#hblock-config {
				margin-bottom: 20px;
			}

			.hblock-file-label,
			.hblock-file-content {
				margin-bottom: 10px;
			}

			.hblock-file-label > span {
				font-size: 16px;
				margin-left: 4px;
			}

			.hblock-file-content {
				resize: vertical;
			}
		</style>
		<script>
			'use strict';
			(function () {
				const $save = document.querySelector('#hblock-save');
				const $update = document.querySelector('#hblock-update');

				const files = Array.from(document.querySelectorAll('.hblock-file-content[data-file]')).map(($content) => {
					const name = $content.dataset.file;
					const $toggle = document.querySelector(`.hblock-file-toggle[data-file="${name}"]`);
					return { name, $content, $toggle, dirty: false };
				});

				const request = ({ method, url, headers = {}, body } = {}) => {
					return new Promise((resolve, reject) => {
						const xhr = new XMLHttpRequest();
						xhr.open(method, url, true);
						for (const [key, value] of Object.entries(headers)) {
							xhr.setRequestHeader(key, value);
						}
						xhr.onload = () => {
							if (xhr.status >= 200 && xhr.status < 400) resolve(xhr.responseText);
							else reject(`${xhr.status} ${xhr.statusText}`);
						};
						xhr.onerror = () => { reject(`${xhr.status} ${xhr.statusText}`); }
						xhr.onabort = () => { reject(`${xhr.status} ${xhr.statusText}`); }
						xhr.send(body);
					});
				};

				$save.addEventListener('click', () => {
					$save.disabled = true;
					Promise.all(
						files
							.filter((f) => f.dirty)
							.map((f) =>
								request(f.$toggle.checked
									? {
										method: 'POST',
										url: `hblock/config/${f.name}`,
										headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' },
										body: f.$content.value
									}
									: {
										method: 'DELETE',
										url: `hblock/config/${f.name}`
									}
								)
									.then(() => { f.dirty = false; })
									.catch((error) => { alert(`Save ${f.name}: ${error}`); })
							)
					)
						.catch((error) => { alert(`Save: ${error}`); })
						.finally(() => { $save.disabled = false; });
				});

				$update.addEventListener('click', () => {
					$update.disabled = true;
					request({
						method: 'POST',
						url: 'hblock/update'
					})
						.catch((error) => { alert(`Update: ${error}`); })
						.finally(() => { $update.disabled = false; });
				});

				files.forEach((f) => {
					request({
						method: 'GET',
						url: `hblock/config/${f.name}`
					})
						.then((result) => {
							f.$content.value = result;
							f.$content.classList.remove('hidden');
							f.$toggle.checked = true;
						})
						.catch((error) => {
							f.$content.value = '';
							f.$content.classList.add('hidden');
							f.$toggle.checked = false;
						})
						.finally(() => {
							f.$content.addEventListener('change', () => {
								f.dirty = true;
							});
							f.$toggle.addEventListener('change', () => {
								f.$content.classList.toggle('hidden', !f.$toggle.checked);
								f.dirty = true;
							});
						});
				});
			})();
		</script>
	]]
}
